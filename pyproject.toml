[tool.poetry]
name = "ampel-lsst-archive"
version = "0.0.1-alpha.0"
description = "LSST alert archive for the Ampel system"
authors = [
    "Jakob van Santen <jakob.van.santen@desy.de>",
]
maintainers = [
    "Jakob van Santen <jakob.van.santen@desy.de>"
]
license = "BSD-3-Clause"
readme = "README.md"
homepage = "https://ampelproject.github.io"
repository = "https://github.com/AmpelProject/Ampel-LSST-archive"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Typing :: Typed",
]
packages = [
    {include = "ampel"}
]

[tool.poetry.dependencies]
python = "^3.12"
sqlalchemy = "~2.0.0"
fastapi = {version = "^0.115.0"}
pydantic = {version = "^2"}
PyJWT = {version = "^2.1.0", extras = ["server"]}
fastavro = {version = "^1.9.2", extras = ["zstandard"]}
astropy-healpix = "^1.0.0"
pydantic-settings = {version = "^2.5.2"}
uvicorn = {version = "^0.32.0"}
sqlmodel = "^0.0.27"
typer = "^0.19.2"
confluent-kafka = {version = "^2.12.0", extras = ["avro", "schemaregistry"]}
orjson = "^3.11.3"
zstd-asgi = "^1.0"
matplotlib = {version = "^3.10.7", optional = true}
scipy = {version = "^1.16.2", optional = true}
aioboto3 = "^15.4.0"
asyncpg = "^0.30.0"
async-lru = "^2.0.5"

[tool.poetry.extras]
image = ["matplotlib", "scipy"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-cov = "^6.0.0"
coverage = {extras = ["toml"], version = "^7.6.4"}
mypy = "^1.13.0"
pytest-timeout = "^2.3.1"
httpx = "^0.27.2"
pytest-mock = "^3.14.0"
pytest-asyncio = "^0.24.0"
moto = "^5.0.20"
types-confluent-kafka = {version = "~1", markers = "python_version < '3.14'"}
scipy-stubs = "^1.16.2.4"
types-aioboto3 = {version = "^15.4.0", extras = ["s3"]}
asyncpg-stubs = "^0.30.2"
alembic = "^1.17.0"

[tool.poetry.scripts]
update-lsst-archive = 'ampel.lsst.archive.update:run'
init-lsst-archive = 'ampel.lsst.archive.provision:main'

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
relative_files = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--showlocals -r a -v --integration"
filterwarnings = [
    "error",
    "default::pytest.PytestUnraisableExceptionWarning",
    "ignore:datetime\\.datetime\\.utcnow\\(\\) is deprecated:DeprecationWarning:botocore",
]

[tool.mypy]
namespace_packages = true
show_error_codes = true
packages = [
  "ampel"
]
exclude = [
    "ampel/lsst/archive/server/tokens.py",
]

[[tool.mypy.overrides]]
module = [
  "astropy.*",
  "astropy_healpix.*",
  "zstd_asgi",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py312"
exclude = [
    "ampel/lsst/archive/server/tokens.py",
    "tests/test_server.py",
]

[tool.ruff.lint]
select = [
    "E4",
    "E7",
    "E9",
    "F",
    "I",
    "UP",
    "B",
    "DTZ",
    "T20",
    "PT",
    "RET",
    "SLF",
    "SIM",
    # # "ARG", # sometimes your arguments have to conform to an interface
    # # "ERA", # seems to prohibit all comments, that's bad
    "PL",
    "PERF",
    "RUF",
]
ignore = [
    "PLR09", # too many (arguments|branches)
]

[tool.ruff.lint.per-file-ignores]
"ampel/lsst/archive/server/*" = ["B008"]
"migrations/*" = ["T201"]
"tests/*" = ["T201", "SLF001", "PLR2004", "PERF", "RUF018"]


[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/alembic"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the tzdata library which can be installed by adding
# `alembic[tz]` to the pip requirements.
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
# name = "ruff"
# type = "module"
# module = "ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# Alternatively, use the exec runner to execute a binary found on your PATH
# name = "ruff"
# type = "exec"
# executable = "ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"

