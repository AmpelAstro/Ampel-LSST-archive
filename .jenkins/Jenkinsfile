pipeline {
  agent none
  stages {
    stage('build') {
      agent {
        dockerfile {
          filename '.jenkins/Dockerfile.build'
        }
      }
      steps {
        sh '(cd /build && poetry run mypy --namespace-packages -p ampel) | mypy2junit > mypy.xml'
      }
      post {
        always {
          junit 'mypy.xml'
        }
      }
    }
    stage('test') {
      agent any
      steps {
        script {
          def tester = docker.build("test-image", ". -f .jenkins/Dockerfile.build")
          def postgres = docker.image("ampelproject/postgres:10.6")
          docker.image("mongo:4.4-bionic").withRun() { mongo ->
          postgres.withRun(
            " -e 'POSTGRES_USER=ampel'"+
            " -e 'POSTGRES_DB=ztfarchive'"+
            " -e 'ARCHIVE_READ_USER=archive-readonly'"+
            " -e 'ARCHIVE_WRITE_USER=ampel-client'"+
            " -v '${workspace}/.jenkins/initdb/archive:/docker-entrypoint-initdb.d/'"
            ) { archive ->
            postgres.inside(
              "--link ${archive.id}:postgres"
            ) {
              sh '#!/bin/sh\nfor _ in $(seq 1 60); do if pg_isready -U ampel -h ${POSTGRES_PORT_5432_TCP_ADDR} -p ${POSTGRES_PORT_5432_TCP_PORT}; then break; fi; sleep 1; done'
            } 
            tester.inside(
              " --link ${archive.id}:_archive"+
              " --link ${mongo.id}:_mongo"+
              " -v ${workspace}:/workspace"
            ) {
              sh '#!/bin/sh\n env | sort'
              sh '#!/bin/sh\n rm /workspace/*.xml || true'
              sh '#!/bin/sh\n'+
              'export ARCHIVE_HOSTNAME=${_ARCHIVE_PORT_5432_TCP_ADDR}\n'+
              'export ARCHIVE_PORT=${_ARCHIVE_PORT_5432_TCP_PORT}\n'+
              'export MONGO_HOSTNAME=${_MONGO_PORT_27017_TCP_ADDR}\n'+
              'export MONGO_PORT=${_MONGO_PORT_27017_TCP_PORT}\n'+
              'cd /build && poetry run pytest -v --timeout=60 --junitxml=/workspace/pytest.xml'
            }
          }
        }}
      }
      post {
        always {
          junit(testResults: '*.xml', allowEmptyResults: true)
        }
      }
    }
    stage('deploy') {
      when { tag "v*" }
      agent {
        dockerfile {
          filename '.jenkins/Dockerfile.build'
        }
      }
      steps {
        withCredentials([string(credentialsId: 'pypi-api-token-ampel-ztf', variable: 'POETRY_PYPI_TOKEN_PYPI')]) {
          sh 'cd /build\n'+
          'poetry config --list\n'+
          'poetry publish -n --build --username __token__ --password $POETRY_PYPI_TOKEN_PYPI --verbose\n'+
          'if [ $(curl -s -o /dev/null -I -w "%{http_code}" "https://pypi.org/pypi/ampel-ztf/$(poetry version -s)/json") = "200" ]; then\n'+
          '  curl "https://pypi.org/pypi/ampel-ztf/$(poetry version -s)/json" | jq .info\n'+
          'else\n'+
          '  echo "Version "$(poetry version -s)" failed to upload"; exit 1\n'+
          'fi'
        }
      }
    }
  }
}
